// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/itineraries": {
            "get": {
                "description": "Retrieve all itineraries with user details.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "itineraries"
                ],
                "summary": "Get all itineraries",
                "responses": {
                    "200": {
                        "description": "List of itineraries",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ItineraryResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new itinerary with required fields.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "itineraries"
                ],
                "summary": "Create a new itinerary",
                "parameters": [
                    {
                        "description": "Itinerary details",
                        "name": "itinerary",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateItineraryRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Itinerary created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data or missing fields",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/itineraries/post/{postID}": {
            "get": {
                "description": "Retrieve an itinerary by its post ID, including user details.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "itineraries"
                ],
                "summary": "Get itinerary by post ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Post ID",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Itinerary details with user information",
                        "schema": {
                            "$ref": "#/definitions/models.responseItinerary"
                        }
                    },
                    "404": {
                        "description": "Itinerary not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/itineraries/state/{stateID}": {
            "get": {
                "description": "Retrieve all itineraries associated with a specific state.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "itineraries"
                ],
                "summary": "Get itineraries by state ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "State ID",
                        "name": "stateID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of itineraries",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.responseItinerary"
                            }
                        }
                    },
                    "404": {
                        "description": "State not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/itineraries/user/{userID}": {
            "get": {
                "description": "Retrieve all itineraries created by a specific user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "itineraries"
                ],
                "summary": "Get itineraries by user ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of itineraries",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.responseItinerary"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/follow": {
            "post": {
                "description": "Add a follow relationship between a follower and target.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Follow a user or page",
                "parameters": [
                    {
                        "description": "Follower ID, Target ID, and type",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UnfollowRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\":\"Successfully followed\"}"
                    },
                    "400": {
                        "description": "{\"message\":\"Invalid request body or type\"}"
                    },
                    "404": {
                        "description": "{\"message\":\"User or target not found\"}"
                    },
                    "409": {
                        "description": "{\"message\":\"Cannot follow self or already following\"}"
                    },
                    "500": {
                        "description": "{\"message\":\"Internal server error\"}"
                    }
                }
            }
        },
        "/users/follow/check": {
            "post": {
                "description": "Check if a follower is following a target (user or page).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Check follow status",
                "parameters": [
                    {
                        "description": "Follower ID, Target ID, and type",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.IsFollowingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\":\"true\"}"
                    },
                    "400": {
                        "description": "{\"message\":\"Invalid request body or type\"}"
                    },
                    "500": {
                        "description": "{\"message\":\"Database error\"}"
                    }
                }
            }
        },
        "/users/followers": {
            "post": {
                "description": "Get a list of followers for a user or page.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Retrieve followers",
                "parameters": [
                    {
                        "description": "Target ID and type",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GetFollowersRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of followers",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Follower"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"message\":\"Invalid request body or type}"
                    },
                    "404": {
                        "description": "{\"message\":\"Target not found}"
                    },
                    "500": {
                        "description": "{\"message\":\"Failed to retrieve followers}"
                    }
                }
            }
        },
        "/users/followings": {
            "post": {
                "description": "Get a list of users or pages that a user is following.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Retrieve followings",
                "parameters": [
                    {
                        "description": "User ID",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GetFollowingsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of followings",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Following"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"message\":\"Invalid request body\"}"
                    },
                    "404": {
                        "description": "{\"message\":\"User not found\"}"
                    },
                    "500": {
                        "description": "{\"message\":\"Failed to retrieve followings\"}"
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Logs in the user with a username or email and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.loginUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/models.loginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid credentials"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/register": {
            "post": {
                "description": "Creates a new user with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User information",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.createUserInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User registered"
                    },
                    "400": {
                        "description": "Invalid input data"
                    },
                    "409": {
                        "description": "Username or Email already exists"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/unfollow": {
            "post": {
                "description": "Remove a follow relationship between a follower and target.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Unfollow a user or page",
                "parameters": [
                    {
                        "description": "Follower ID, Target ID, and type",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UnfollowRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\":\"Successfully unfollowed\"}"
                    },
                    "400": {
                        "description": "{\"message\":\"Invalid request body or type\"}"
                    },
                    "404": {
                        "description": "{\"message\":\"Follow relationship not found\"}"
                    },
                    "500": {
                        "description": "{\"message\":\"Failed to unfollow\"}"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CreateItineraryRequest": {
            "type": "object",
            "required": [
                "budget",
                "num_days",
                "num_nights",
                "size",
                "state_id",
                "title",
                "user_id"
            ],
            "properties": {
                "budget": {
                    "type": "string",
                    "example": "$1000"
                },
                "num_days": {
                    "type": "integer",
                    "example": 5
                },
                "num_nights": {
                    "type": "integer",
                    "example": 4
                },
                "size": {
                    "type": "integer",
                    "example": 3
                },
                "state_id": {
                    "type": "integer",
                    "example": 2
                },
                "title": {
                    "type": "string",
                    "example": "Trip to Florida"
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "An error occurred"
                }
            }
        },
        "models.Follower": {
            "type": "object",
            "properties": {
                "full_name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "models.Following": {
            "type": "object",
            "properties": {
                "full_name": {
                    "type": "string",
                    "example": "Jane Smith"
                },
                "id": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "models.GetFollowersRequest": {
            "type": "object",
            "required": [
                "target_id",
                "type"
            ],
            "properties": {
                "target_id": {
                    "type": "integer",
                    "example": 1
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "user",
                        "page"
                    ],
                    "example": "user"
                }
            }
        },
        "models.GetFollowingsRequest": {
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "models.IsFollowingRequest": {
            "type": "object",
            "required": [
                "follower_id",
                "target_id",
                "type"
            ],
            "properties": {
                "follower_id": {
                    "type": "integer",
                    "example": 1
                },
                "target_id": {
                    "type": "integer",
                    "example": 2
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "user",
                        "page"
                    ],
                    "example": "user"
                }
            }
        },
        "models.Itinerary": {
            "type": "object",
            "properties": {
                "budget": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "highlights": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "images": {
                    "type": "string"
                },
                "numDays": {
                    "type": "integer"
                },
                "numNights": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                },
                "stateId": {
                    "type": "integer"
                },
                "suggestions": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.ItineraryResponse": {
            "type": "object",
            "properties": {
                "itinerary": {
                    "$ref": "#/definitions/models.Itinerary"
                },
                "username": {
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "models.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                }
            }
        },
        "models.UnfollowRequest": {
            "type": "object",
            "required": [
                "follower_id",
                "target_id",
                "type"
            ],
            "properties": {
                "follower_id": {
                    "type": "integer",
                    "example": 1
                },
                "target_id": {
                    "type": "integer",
                    "example": 2
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "user",
                        "page"
                    ],
                    "example": "user"
                }
            }
        },
        "models.createUserInput": {
            "type": "object",
            "properties": {
                "DOB": {
                    "description": "Date of birth of the user in YYYY-MM-DD format\nExample: 2000-04-08",
                    "type": "string"
                },
                "Email": {
                    "description": "Email address of the user\nExample: ppatel@ufl.edu",
                    "type": "string"
                },
                "Fullname": {
                    "description": "Full name of the user\nExample: Parth Patel",
                    "type": "string"
                },
                "Location": {
                    "description": "Location of the user\nExample: Kansas",
                    "type": "string"
                },
                "Password": {
                    "description": "Password for the user account\nExample: test123",
                    "type": "string"
                },
                "Username": {
                    "description": "Username for the user account\nExample: ParthPatel",
                    "type": "string"
                }
            }
        },
        "models.loginResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Login successful"
                },
                "user": {
                    "type": "object",
                    "properties": {
                        "DOB": {
                            "type": "string",
                            "example": "2002-05-26"
                        },
                        "Email": {
                            "type": "string",
                            "example": "nsoni@ufl.edu"
                        },
                        "Fullname": {
                            "type": "string",
                            "example": "Nirvisha Soni"
                        },
                        "ID": {
                            "type": "integer",
                            "example": 1
                        },
                        "Location": {
                            "type": "string",
                            "example": "Gainesville"
                        },
                        "Password": {
                            "type": "string",
                            "example": ""
                        },
                        "Username": {
                            "type": "string",
                            "example": "NirvishaSoni"
                        }
                    }
                }
            }
        },
        "models.loginUser": {
            "type": "object",
            "required": [
                "password",
                "username_or_email"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username_or_email": {
                    "type": "string"
                }
            }
        },
        "models.responseItinerary": {
            "type": "object",
            "properties": {
                "budget": {
                    "type": "string",
                    "example": "$1000"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "num_days": {
                    "type": "integer",
                    "example": 5
                },
                "num_nights": {
                    "type": "integer",
                    "example": 4
                },
                "size": {
                    "type": "integer",
                    "example": 3
                },
                "state_id": {
                    "type": "integer",
                    "example": 2
                },
                "title": {
                    "type": "string",
                    "example": "Trip to Florida"
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.2",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Roamio",
	Description:      "The api to Roamio's server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
